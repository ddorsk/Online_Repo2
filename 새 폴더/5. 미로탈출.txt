package aaa;

public class JJyri {
	char[][] maze = {
			{'X', 'O', 'O', 'O', 'F'},
			{'O', 'O', 'X', 'X', 'X'},
			{'X', 'O', 'X', 'X', 'X'},
			{'X', 'O', 'O', 'O', 'O'},
			{'X', 'X', 'X', 'X', 'S'},
	};
	
	int ROWS = 5;
	int COLS = 5;
	char START = 'S';
	char FINISH = 'F';
	char PATH = 'O';
	char WALL = 'X';
	
	int[] dRow = {-1, 1, 0, 0};
	int[] dCol = {0, 0, -1, 1};
	
	int visited[][] = new int[ROWS][COLS]; // 1는 지나감 0은 안지나감
	
	int solve(int r, int c) {
		if(maze[r][c] == FINISH) {
			System.out.println("출구를 찾았다!");
			return 1;
		}
		
		visited[r][c] = 1;
		
		for(int i = 0; i < 4; i++) {
			int newR = r + dRow[i];
			int newC = c + dCol[i];
			
			if(isVailed(newR, newC) == 1) {
				solve(newR, newC);
			}
		}
		
		return 0;
		
	}
	
	int isVailed(int r, int c) {
		if(r >= 0 && r < ROWS && c >= 0 && c < COLS && visited[r][c] == 0 ) {
			return 1;
		}
		return 0;
	}
	
	int[] Start() {
		for(int i = 0; i < ROWS; i++) {
			for(int j = 0; j < COLS; j++) {
				if(maze[i][j] == START) {
					return new int[] {i, j};
				}
			}
		}
		return null;
	}
	
	public static void main(String[] args) {
		JJyri jj = new JJyri();
		
		// 시작 지점 찾기
		int[] startP = jj.Start();
		
		if(startP != null && jj.solve(startP[0], startP[1]) == 1) {
			System.out.println("탈출");
		}else {
			System.out.println("실패");
		}
	}
	
}